#!/bin/bash
set -euo pipefail

# TODO: add options to set options in runtime

# FIXME: usage of porcelain git commands:
#  add, checkout, clean, commit, describe, pull, reset

REMOTE=origin

VENV=vgh-pagesenv

BRANCH_NAME=gh-pages
DOCSRC=src/doc
DOCBUILD=build/html

usage()
{
  echo "Usage: $0 [--help] [--auto]"
  cat <<HELPME
Creates a new branch containing documentation only generated by Sphinx.

Requires sphinx to be installed in virtual environment set by VENV.
Builds documentation source set by DOCSRC.
Expects result to be in location set by DOCBUILD.

All paths relative to current directory (not to script location).

Name of branch created is set by BRANCH_NAME.

Options:
    --help    Prints this message.
    --auto    Runs without any user input, (might want to make a backup first
              and make sure 'origin' is set)

WIP

As of now variables set inside script, argument options are coming...
HELPME
}

require_clean_work_tree()
{
  # according https://stackoverflow.com/a/3879077/3417742
  # Update the index
  git update-index -q --ignore-submodules --refresh
  err=0

  # Disallow unstaged changes in the working tree
  if ! git diff-files --quiet --ignore-submodules --
  then
    echo >&2 "Cannot $1. Reason: you have unstaged changes:"
    git diff-files --name-status -r --ignore-submodules -- >&2
    err=1
  fi

  # Disallow uncommitted changes in the index
  if ! git diff-index --cached --quiet HEAD --ignore-submodules --
  then
    echo >&2 "Cannot $1. Reason: your index contains uncommitted changes:"
    git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
    err=1
  fi

  if [ $err = 1 ]
  then
    echo >&2 -e "\nPlease commit or stash them.\n"
    exit 2
  fi
}

cleanup()
{
  echo -e "\nCleaning up..."
  rm -r $VENV
}

# MAIN

# do setup (read arguments)
AUTO=0
POSITIONAL=()

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
  -h|--help)
    usage
    exit 0
  ;;
  --auto)
    AUTO=1
    shift
  ;;
  *)
    if [[ $1 = -* ]]
    then
      echoi >&2 'Unexpected option found'
      usage
      exit 1
    else
      # XXX: see usage WIP section
      POSITIONAL+=("$1")
      shift
      echo >&2 'Unexpected argument found'
      usage
      exit 1
    fi
  ;;
  esac
done

[ $AUTO -eq 0 ] && require_clean_work_tree "Build documentation"

if BACK_NAME=$(git symbolic-ref -q HEAD)
then
  BACK_NAME=${BACK_NAME##refs/heads/}
  BACK_NAME=${BACK_NAME:-HEAD}  # shouldn't happen unless AUTO
else
  echo >&2 "Looks like a lost HEAD."
  exit 2
fi

virtualenv $VENV
trap 'cleanup; git checkout "$BACK_NAME"' ERR

source $VENV/bin/activate
pip install -r requirements.txt

GITVERSION=$(git describe --long --dirty=-dev0)
PACKAGEVERSION=$(python setup.py --version)

echo -e "\nPackage version $PACKAGEVERSION is tagged as $GITVERSION by git\n"

python setup.py install

echo

# build doc
cd $DOCSRC
make clean && make html
cd -

if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"
then
  # update branch
  git checkout $BRANCH_NAME
  if [ $AUTO -eq 0 ]
  then
    # fail safe
    if [ "$(git ls-remote --exit-code --get-url $REMOTE)" != "$REMOTE" ]
    then
      git pull --ff-only origin $BRANCH_NAME
    else
      echo >&2 -e "\nMissing remote 'origin' ... skipping pull\n"
    fi
  else
    # fail fast
    git pull  --ff-only origin $BRANCH_NAME
  fi
else
  # create branch
  git checkout --orphan $BRANCH_NAME
fi

if [ -d "$DOCBUILD" ]
then
  git reset --hard
  # FIXME: keep more
  git ls-files -z --others --exclude-standard --exclude=/$DOCBUILD/ | \
    tee >(xargs -0 echo "Removing") | xargs -0 rm -rf
  cp -r $DOCBUILD/. . && rm -rf $DOCBUILD
  git add .
  git clean -fd  # remove empty directories, not that they matter
  git commit -am "Rebuild from $GITVERSION"
else
  echo >&2 "Failed to locate build directory"
  exit 3
fi

cleanup

echo -e "\n\nBuilding *$BRANCH_NAME* was successful," \
        "\nplease consider squashing before pushing!\n"
